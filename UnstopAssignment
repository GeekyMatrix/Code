1. Database Structure
Here's a simple table structure using SQL:

Table: seats
Column Name	    Type	                        Description
id	            INT	               Primary key, seat number (1 to 80).
row	            INT	               Row number (1 to 12, where 12th has 3 seats)
status	        BOOLEAN	           true for booked, false for available.


2. FrontendLogic

<div class="coach">
  <!-- Row 1 -->
  <div class="row">
    <div class="seat available">1</div>
    <div class="seat available">2</div>
    <!-- More seats -->
  </div>
  <!-- More rows -->
</div>

<style>
  .coach { display: flex; flex-direction: column; }
  .row { display: flex; }
  .seat { width: 40px; height: 40px; margin: 5px; background-color: green; }
  .seat.booked { background-color: red; }
</style>


3.Backend logic(Seat)

#include <iostream>
#include <vector>
#include <utility>

using namespace std;

// Function to query available seats; for now, this is a dummy function returning seat availability.
vector<vector<int>> query_available_seats() {
    // Example: A train with 12 rows, first 11 rows with 7 seats, and the last row with 3 seats.
    return {
        {1, 2, 3, 4, 5, 6, 7},  // Row 1
        {8, 9, 10, 11, 12, 13, 14},  // Row 2
        {15, 16, 17, 18, 19, 20, 21},  // Row 3
        {22, 23, 24, 25, 26, 27, 28},  // Row 4
        {29, 30, 31, 32, 33, 34, 35},  // Row 5
        {36, 37, 38, 39, 40, 41, 42},  // Row 6
        {43, 44, 45, 46, 47, 48, 49},  // Row 7
        {50, 51, 52, 53, 54, 55, 56},  // Row 8
        {57, 58, 59, 60, 61, 62, 63},  // Row 9
        {64, 65, 66, 67, 68, 69, 70},  // Row 10
        {71, 72, 73, 74, 75, 76, 77},  // Row 11
        {78, 79, 80}  // Row 12 (only 3 seats)
    };
}

// Function to book seats in a single row
vector<int> book_seats_in_row(vector<int>& row, int requested_seats) {
    vector<int> booked_seats;
    
    for (int i = 0; i < requested_seats; i++) {
        booked_seats.push_back(row[i]);
    }
    
    row.erase(row.begin(), row.begin() + requested_seats);  // Remove booked seats
    return booked_seats;
}

// Main function to allocate seats based on the request
vector<int> allocate_seats(int requested_seats) {
    vector<vector<int>> available_seats = query_available_seats();  // Fetch all available seats by row
    vector<int> booked_seats;

    // Step 1: Try to find all seats in the same row
    for (auto& row : available_seats) {
        if (row.size() >= requested_seats) {
            return book_seats_in_row(row, requested_seats);
        }
    }

    // Step 2: If not found, book nearby seats
    for (auto& row : available_seats) {
        while (requested_seats > 0 && !row.empty()) {
            booked_seats.push_back(row[0]);
            row.erase(row.begin());  // Allocate seat and remove from row
            requested_seats--;
        }

        if (requested_seats == 0) {
            return booked_seats;
        }
    }

    return booked_seats;  // Return booked seats (or empty vector if not enough seats)
}

// Main function to test the allocation
int main() {
    int requested_seats;

    // Input: number of seats to reserve
    cout << "Enter the number of seats to reserve: ";
    cin >> requested_seats;

    vector<int> booked_seats = allocate_seats(requested_seats);

    if (!booked_seats.empty()) {
        cout << "Seats booked: ";
        for (int seat : booked_seats) {
            cout << seat << " ";
        }
        cout << endl;
    } else {
        cout << "Not enough seats available." << endl;
    }

    return 0;
}

